------------------------------------ Method 1 (Two Pointers) ------------------------------------------
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int left = 0, right = numbers.length - 1;
        
        while(left < right) {
            int total = numbers[left] + numbers[right];
            if (total == target) {
                return new int[] {left + 1, right + 1};
            }
            else if (total > target) {
                right--;
            }
            
            else {
                left ++;
            }
        }
        return new int[2];
    }
}
---------------------------------------- Method 2 (HashMap) -------------------------------------------
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < numbers.length; i++) {
            if (map.containsKey(numbers[i])) {
                int complement = map.get(numbers[i]);
                map.put(complement, i + 1);
                return new int[] {complement, i + 1};
            }
            else {
                map.put(target - numbers[i], i + 1);
            }
            
        }
            return new int[2];
    }
}
